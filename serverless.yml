# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: jw-server

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: python3.6

# you can overwrite defaults here
  stage: dev
  region: ap-southeast-2

# you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
      Action:
        - "s3:PutObject"
        - "s3:GetObject"
        - "s3:DeleteObject"
      Resource:
        Fn::Join:
          - ""
          - - "arn:aws:s3:::${self:custom.bucketName}/*"
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"
  
    - Effect: "Allow"
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchWriteItem
      Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.stage}-*"

# you can define service wide environment variables here
  environment:
    'bucketName': '${self:custom.bucketName}'
#    variable1: value1

custom:
  bucketName: "jw-server2"

# you can add packaging information here
#package:
#  include:
#    - include-me.py
#    - include-me-dir/**
#  exclude:
#    - exclude-me.py
#    - exclude-me-dir/**

functions:
  hello:
    handler: handler.hello

  download_highest_temp:
    handler: handler.download_highest_temperature
    timeout: 10
    events:
      # 日本時間で 23:30 のつもり
      - schedule: cron(30 14 * * ? *)

  download_lowest_temp:
    handler: handler.download_lowest_temperature
    timeout: 10
    events:
      # 日本時間で 23:32 のつもり
      - schedule: cron(32 14 * * ? *)

  download_snow:
    handler: handler.download_snow
    timeout: 10
    events:
      # 日本時間で 23:34 のつもり
      - schedule: cron(34 14 * * ? *)

  download_rain24h:
    handler: handler.download_rain24h
    timeout: 10
    events:
      # 日本時間で 23:36 のつもり
      - schedule: cron(36 14 * * ? *)
    

  scrape_highest:
    handler: handler.scrape_highest
    timeout: 180
    events:
      # 日本時間で 23:40 のつもり
      - schedule: cron(40 14 * * ? *)
      - http:
          path: scrape_highest
          method: post
          private: false # APIキーを使用する
          cors: true  # API GatewayにCORSの設定をする

  scrape_lowest:
    handler: handler.scrape_lowest
    timeout: 180
    events:
      # 日本時間で 23:43 のつもり
      - schedule: cron(43 14 * * ? *)
      - http:
          path: scrape_lowest
          method: post
          private: false # APIキーを使用する
          cors: true  # API GatewayにCORSの設定をする

  scrape_snow:
    handler: handler.scrape_sn
    timeout: 180
    events:
      # 日本時間で 23:46 のつもり
      - schedule: cron(46 14 * * ? *)
      - http:
          path: scrape_snow
          method: post
          private: false # APIキーを使用する
          cors: true  # API GatewayにCORSの設定をする

  scrape_rain24h:
    handler: handler.scrape_rain
    timeout: 240
    events:
      # 日本時間で 23:49 のつもり
      - schedule: cron(49 14 * * ? *)
      - http:
          path: scrape_rain24h
          method: post
          private: false # APIキーを使用する
          cors: true  # API GatewayにCORSの設定をする

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
  Resources:
    jwServerBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.bucketName}

    jwHighestDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
#      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: place
            AttributeType: S
          -
            AttributeName: date
            AttributeType: S
          -
            AttributeName: temperature
            AttributeType: S
        KeySchema:
          -
            AttributeName: place
            KeyType: HASH
          -
            AttributeName: date
            KeyType: RANGE
        GlobalSecondaryIndexes:
          -
            IndexName: globalIndex1
            KeySchema:
              -
                AttributeName: date
                KeyType: HASH
              -
                AttributeName: temperature
                KeyType: RANGE
            Projection:
                ProjectionType: ALL
            ProvisionedThroughput:
                ReadCapacityUnits: 15
                WriteCapacityUnits: 15
        ProvisionedThroughput:
          ReadCapacityUnits: 15
          WriteCapacityUnits: 15
        TableName: "${self:provider.stage}-jw-highest"

    jwLowestDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
#      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: place
            AttributeType: S
          -
            AttributeName: date
            AttributeType: S
          -
            AttributeName: temperature
            AttributeType: S
        KeySchema:
          -
            AttributeName: place
            KeyType: HASH
          -
            AttributeName: date
            KeyType: RANGE
        GlobalSecondaryIndexes:
          -
            IndexName: globalIndex1
            KeySchema:
              -
                AttributeName: date
                KeyType: HASH
              -
                AttributeName: temperature
                KeyType: RANGE
            Projection:
                ProjectionType: ALL
            ProvisionedThroughput:
                ReadCapacityUnits: 15
                WriteCapacityUnits: 15
        ProvisionedThroughput:
          ReadCapacityUnits: 15
          WriteCapacityUnits: 15
        TableName: "${self:provider.stage}-jw-lowest"

    jwSnowDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
#      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: place
            AttributeType: S
          -
            AttributeName: date
            AttributeType: S
          -
            AttributeName: snow_depth
            AttributeType: S
        KeySchema:
          -
            AttributeName: place
            KeyType: HASH
          -
            AttributeName: date
            KeyType: RANGE
        GlobalSecondaryIndexes:
          -
            IndexName: globalIndex1
            KeySchema:
              -
                AttributeName: date
                KeyType: HASH
              -
                AttributeName: snow_depth
                KeyType: RANGE
            Projection:
                ProjectionType: ALL
            ProvisionedThroughput:
                ReadCapacityUnits: 15
                WriteCapacityUnits: 15
        ProvisionedThroughput:
          ReadCapacityUnits: 15
          WriteCapacityUnits: 15
        TableName: "${self:provider.stage}-jw-snow"

    jwRain24hDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
#      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: place
            AttributeType: S
          -
            AttributeName: date
            AttributeType: S
          -
            AttributeName: rainfall_amount
            AttributeType: S
          -
            AttributeName: rainfall_amount_val
            AttributeType: N
            
        KeySchema:
          -
            AttributeName: place
            KeyType: HASH
          -
            AttributeName: date
            KeyType: RANGE
        GlobalSecondaryIndexes:
          -
            IndexName: globalIndex1
            KeySchema:
              -
                AttributeName: date
                KeyType: HASH
              -
                AttributeName: rainfall_amount
                KeyType: RANGE
            Projection:
                ProjectionType: ALL
            ProvisionedThroughput:
                ReadCapacityUnits: 15
                WriteCapacityUnits: 15
          -
            IndexName: globalIndex2
            KeySchema:
              -
                AttributeName: date
                KeyType: HASH
              -
                AttributeName: rainfall_amount_val
                KeyType: RANGE
            Projection:
                ProjectionType: ALL
            ProvisionedThroughput:
                ReadCapacityUnits: 15
                WriteCapacityUnits: 15
        ProvisionedThroughput:
          ReadCapacityUnits: 15
          WriteCapacityUnits: 15
        TableName: "${self:provider.stage}-jw-rain24h"

    jwObservatoryDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
#      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: place
            AttributeType: S
        KeySchema:
          -
            AttributeName: place
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 4
        TableName: "${self:provider.stage}-jw-observatory"

  Outputs:
     RdsLogs:
       Description: "Bucket for jw-server"
       Value:
         Ref: "jwServerBucket"
